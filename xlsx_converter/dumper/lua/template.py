#!/usr/bin/env python
# -*- encoding: utf-8 -*-

# ------------------------------------------------------------
#       @file  template.py
#      @brief  Lua file template.
#
#     @author  VyronLee, lwz_jz@hotmail.com
#   @Modified  2019-09-29 14:44
#  @Copyright  Copyright (c) 2019, VyronLee
# ============================================================

lua_file_template = '''------------------------------------------------------------
--      @file __FILENAME_____SHEETNAME__.lua
--     @brief Auto generated by XlsxConverter, DO NOT EDIT!
--    @author VyronLee(lwz_jz@hotmail.com)
-- @Copyright Copyright(c) 2019, Apache-2.0
------------------------------------------------------------
local keys = {
__SHEET_KEY_SEGMENT__}

local mt = {
\t__index = function(t,k)
\t\treturn keys[k] and t[keys[k].index]
\tend,
\t__tostring = function(t)
\t\tlocal ret = {}
\t\tfor k in pairs(keys) do
\t\t\tif type(t[k]) == "number" then
\t\t\t\ttable.insert(ret, ("%s = %s"):format(k, t[k]))
\t\t\telseif type(t[k]) == "string" then
\t\t\t\ttable.insert(ret, ("%s = '%s'"):format(k, t[k]))
\t\t\tend
\t\tend
\t\treturn ("{%s}"):format(table.concat(ret, ", "))
\tend,
}
local __mt = setmetatable

local conf = {}

conf.data = {
__SHEET_DATA_SEGMENT__}

conf.indexes = {
__SHEET_INDEX_SEGMENT__}

local printable = {
\t__tostring = function(t)
\t\tlocal ret = {}
\t\tfor _, v in ipairs(t) do
\t\t\ttable.insert(ret, tostring(v))
\t\tend
\t\treturn table.concat(ret, "\\n")
\tend
}

conf.parseArgs = function(self, ...)
\tlocal keys, values = {}, {}
\tlocal args = { ... }
\tfor idx,val in ipairs(args) do
\t\tif idx % 2 == 1 then
\t\t\tkeys[#keys + 1] = val
\t\telse
\t\t\tvalues[#values + 1] = val
\t\tend
\tend
\treturn keys, values
end

conf.getData = function(self, ...)
\tlocal ret
\tif select("#", ...) > 0 then
\t\tlocal keys, values = self:parseArgs(...)
\t\tlocal keyHash = table.concat(keys, '-')
\t\tlocal valueHash = table.concat(values, '-')
\t\tlocal keyMap = self.indexes[keyHash] or {}
\t\tlocal valueMap = keyMap[valueHash] or {}
\t\tret  = {}
\t\tfor idx,val in ipairs(valueMap) do
\t\t\tret[#ret + 1] = self.data[val]
\t\tend
\telse
\t\tret = self.data
\tend
\treturn __mt(ret, printable)
end

return conf'''
